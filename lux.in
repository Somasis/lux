#!/bin/bash
# lux, a Linux kernel updater - version @@VERSION@@
#
# Copyright (c) 2014-2015 Kylie McClain <somasis@exherbo.org>
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
# End of copyright.
#

strict_ifs()    { IFS=$'\n\t'; }
unstrict_ifs()  { IFS=$' \n\t'; }
set -euo pipefail
strict_ifs

# Don't mess with these variables, just use lux.conf(5).

MAKEOPTS="-j$(( $(nproc 2>/dev/null || grep -c processor /proc/cpuinfo) + 2 ))"
directory=/usr/src/linux
branch=master
kernel_repo="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git"
target=tag:latest
preferred_config=menuconfig

kernel_prepare() {
    default_kernel_prepare
}

kernel_patch() {
    default_kernel_patch
}

kernel_configure() {
    default_kernel_configure
}

kernel_compile() {
    default_kernel_compile
}

kernel_install() {
    default_kernel_install
}

kernel_post_install() {
    default_kernel_post_install
}

default_kernel_prepare() {
    printf "Upgrading %s --> %s, press ^C to abort.\n\n" "$running_kernel_version" "$target_version"
}

default_kernel_patch() {
    :
}

default_kernel_configure_print_choices() {
    printf 'Choices for configuring kernel:\n'
    printf '    %s - %s\n'    \
        e "Use existing configuration, if it exists; else, use running config, using default on error" \
        d "Use default configuration" \
        p "Use running configuration" \
        m "Manually configure kernel with ${preferred_config}, basing on existing, running, or default config" \
        n "Manually configure kernel with ${preferred_config}, basing on default config" \
        o "Manually configure kernel with ${preferred_config}, basing on running config" \
        i "Interactively configure new options, using existing configuration, running, or default config" \
        u "Interactively configure new options, using running configuration" \
        q "Exit ${me}"
}

default_kernel_configure_load_running_config() {
    debug "Attempting to load running config\n"
    if [[ -r /proc/config.gz ]];then
        gunzip -c /proc/config.gz > "${directory}"/.config
    elif [[ ! -r /proc/config.gz && -f "${LIBDIR}"/modules/"$(uname -r)"/kernel/kernel/configs.ko* ]];then
        debug "Attempting to modprobe configs module\n"
        modprobe configs
        gunzip -c /proc/config.gz > "${directory}"/.config
    elif [[ -r /boot/config-"$(uname -r)" ]];then
        debug "Using config at /boot/config-$(uname -r)\n"
        cat /boot/config-"$(uname -r)" > "${directory}"/.config
    else
        printf "Couldn't load running configuration, can't find /proc/config.gz or /boot/config-$(uname -r)\n" >&2
        return 1
    fi
}

default_kernel_configure() {
    if [[ "${quiet}" == 'false' ]];then
        default_kernel_configure_print_choices
    fi
    method=$(multiple_ask "How do you want to configure the kernel?" e d p m n o i u q ?)
    case "${method,,}" in
        e)
            if [[ -r ${directory}/.config ]];then
                debug "Using existing configuration\n"
                method=olddefconfig
            else
                method=olddefconfig
                if ! default_kernel_configure_load_running_config;then
                    printf "Using default configuration\n" >&2
                    method=defconfig
                fi
            fi
        ;;
        d) method=defconfig ;;
        p)
            method=olddefconfig
            default_kernel_configure_load_running_config || die $err_unable_to_load_running_config
        ;;
        m)
            if [[ ! -f ${directory}/.config ]] && ! default_kernel_configure_load_running_config;then
                method=defconfig
                make $method || die $err_kernel_configuration_failed
            fi
            method=${preferred_config}
        ;;
        n)
            method=defconfig
            make $method || die $err_kernel_configuration_failed
            method=${preferred_config}
        ;;
        o)
            if ! default_kernel_configure_load_running_config;then
                die $err_unable_to_load_running_config
            else
                method=${preferred_config}
            fi
        ;;
        i)
            if [[ -r ${directory}/.config ]];then
                debug "Using existing configuration\n"
                method=oldconfig
            else
                method=oldconfig
                if ! default_kernel_configure_load_running_config;then
                    printf "Using default configuration\n" >&2
                    method=defconfig
                    make $method || die $err_kernel_configuration_failed
                    method=oldconfig
                fi
            fi
        ;;
        u)
            method=oldconfig
            default_kernel_configure_load_running_config || die $err_unable_to_load_running_config
        ;;
        q) exit $err_exited ;;
        ?)
            default_kernel_configure; return $?
        ;;
    esac
    make $method || die $err_kernel_configuration_failed
}

default_kernel_compile() {
    make || die $err_kernel_compilation_failed
}

default_kernel_install() {
    make modules_install || die $err_kernel_modules_install_failed
    image="$directory/$(make image_name)"
    if type -fP kernel-install >/dev/null 2>&1 && ask "Do you want to use kernel-install (instead of make install)?" y;then
        kernel-install add "${target_version}" "$image" || die $err_kernel_failed_to_install
    else
        make install || die $err_kernel_failed_to_install
    fi
}

default_kernel_post_install() {
    printf 'Finished upgrading kernel. (%s --> %s)\n\n' "$running_kernel_version" "$target_version"
}

get_target_version() {
    case "$target" in
        tag:*)
            if [[ "${target##tag:}" == "latest" ]];then
                _target_version=$(git tag --sort v:refname | sort -ud)
                if [[ -f "${git_dir}/shallow" ]];then # is shallow...
                    # contact the remote for the tag list instead. shallow repos don't contain the full tag list
                    _target_version=$(git ls-remote -t "$kernel_repo" | sed 's#.*refs/tags/##;s#\^{}.*##' | cut -d'v' -f2- | tr '.' ' ' | sort -k 1n,1n -k 2n,2n -k 3n,3n -k 4n,4n | tr ' ' '.')
                fi
                if [[ "$branch" == *stable* || $(basename ${kernel_repo} | sed 's/\.git//') == *-stable ]];then # if following stable branch you probably don't want any dash versions
                    debug "Filtering out versions ending with dashed sections, those are testing versions...\n"
                    _target_version=$(echo "$_target_version" | grep -v -- '-.*')
                fi
                _target_version=$(echo "$_target_version" | tail -n1)
            else
                _target_version=${target##tag:}
            fi
            if [[ "${_target_version}" == [0-9].[0-9] ]];then
                _target_version=${_target_version}.0
            fi
        ;;
        *)
            _target_version=${target}
            git_pull
            displayed_target_version=$(get_makefile_ver)
        ;;
    esac
    _target_version=${_target_version#v}
    displayed_target_version=${displayed_target_version:-$_target_version}
    debug "Displayed target version: ${displayed_target_version}\n"
    debug "Actual target version: ${_target_version}\n"
    echo "$_target_version"
}

git_pull() {
    if git rev-parse --verify "${branch}" >/dev/null 2>&1 || [[ "${branch}" == 'auto' ]];then
        branch=$(git rev-parse --abbrev-ref HEAD)
    else
        quiet_git branch "${branch}" || true
    fi
    quiet_git reset --hard origin/"${branch}" >/dev/null 2>&1
    quiet_git clean -fdxq -e '.config'
    quiet_git checkout -f HEAD >/dev/null 2>&1 || quiet_git reset --hard origin/"${branch}" >/dev/null 2>&1 # prevent merge conflicts
    quiet_git clean -fdxq -e '.config'
    # if we don't specify depth, `git` tries getting the whole tree!
    quiet_git pull -f "$(debug && echo -v)" --depth=1 origin "${branch}" || quiet_git reset --hard origin/"${branch}" >/dev/null 2>&1 # prevent merge conflicts
    quiet_git fetch -p
    quiet_git reset --hard origin/"${branch}" >/dev/null 2>&1
}

get_makefile_ver() {
    make -s kernelversion 2>/dev/null
}

me="${0##*/}"

err_exited=0
err_invalid_arg=1
err_nonexistant_dir=2
err_no_git_repo=4
err_unable_to_make_dir=5
err_unwritable_dir=6
err_cant_change_dir=7
err_not_gonna_update=10
err_only_one_action=31
err_not_a_kernel_repo=62
err_kernel_clean_failed=63
err_kernel_configuration_failed=64
err_kernel_compilation_failed=65
err_kernel_modules_install_failed=66
err_kernel_failed_to_install=67
err_unable_to_load_running_config=80
err_ctrl_c=127

running_kernel_version=$(uname -r | sed 's#-.*##;s#[^0-9.]##g')

# reset the environment a little so commands are more predictable
export GREP_OPTIONS="" LC_ALL=C
TMPDIR=${TMPDIR:-/tmp}
LIBDIR="@@libdir@@"
config="/etc/lux.conf"

[[ -f "${config}" ]] && . "${config}"

directory="${directory:-/usr/src/linux}"
prepare_log="${directory}/lux-prepare.log"
patch_log="${directory}/lux-patch.log"
compile_log="${directory}/lux-compile.log"
install_log="${directory}/lux-install.log"
post_install_log="${directory}/lux-post-install.log"

debug() {
    local print="${@:-}"
    if [[ "$debug" == "true" && -z "${print}" ]];then
        return 0
    elif [[ "${debug}" == "true" && ! -z "${print}" ]];then
        printf "$print" >&2
    elif [[ "${debug}" == "false" && -z "${print}" ]];then
        return 1
    fi
}

quiet() {
    if [[ "$quiet" == 'true' ]];then
        return 0
    else
        return 1
    fi
}

usage() {
    echo "usage: ${me} [-dfiquvh] [directory]"
    exit $err_exited
}

version() {
    sed 's/^# //;s/, .*-//;s/version //;/^#!/d;s/^#//' "$0" |
    while IFS= read -r copyright_line;do
        if [[ "$copyright_line" == "End of copyright." ]];then
            break
        else
            printf '%s\n' "$copyright_line"
        fi
    done
    exit $err_exited
}

die() {
    err_code=$1
    printf "Exiting with error code %s\n" "$err_code" >&2
    exit $err_code
}

invalid_arg() {
    printf "%s: invalid option -- '%s'\n" "${me}" "$*" >&2
    die $err_invalid_arg >/dev/null 2>&1
}

realpath() {
    printf '%s\n' "$(cd $(dirname $1); pwd)/$(basename $1)"
}

quiet_git() {
    unstrict_ifs
    local cmd="$1"
    shift
    local args="$@"
    local err

    if [[ "$debug" == 'true' ]];then
        git $cmd $args; err=$?; strict_ifs; return $err
    fi
    case "$cmd" in
        pull|reset|checkout|fetch)
            args="$cmd $args -q"
        ;;
        *)
            args="$cmd $args"
        ;;
    esac
    git $args; err=$?; strict_ifs; return $err
}

is_actually_kernel_repo() {
    # sanity checks to make sure this is actually a kernel git repo
    # kernel Makefile always has VERSION as first line
    [[ "$fresh_tree" == 'true' ]] && return 0

    if [[ -f "${directory}/Makefile" ]] && head -1 "${directory}/Makefile" | grep -q '^VERSION';then
        return 0
    else
        return 1
    fi
}

ask() {
    ask_text="$1"
    ask_default="${2:-y}"
    if [[ "$ask_default" == "y" ]];then
        _default='y'
        _default_text="Y/n"
    else
        _default='n'
        _default_text="y/N"
    fi

    if [[ "$quiet" == 'true' ]];then
        ask_reply="$_default"
    else
        printf "%s [%s] " "$ask_text" "$_default_text" >&2
        read -r -n1 ask_reply; [[ "$ask_reply" ]] && printf '\n' >&2
    fi

    ask_reply=$(echo "$ask_reply" | tr '[:upper:]' '[:lower:]')

    if [[ -z "$ask_reply" ]];then
        ask_reply="$_default"
    fi

    if [[ "$_default" == "$ask_reply" ]];then
        return 0
    elif [[ "$_default" != "$ask_reply" ]] && [[ "$ask_reply" == 'y' || "$ask_reply" == 'n' ]];then
        return 1
    else
        ask "$@"; return $?
    fi

    return $?
}

multiple_ask() {
    unstrict_ifs
    ask_text="$1"; shift
    ask_default="${1^^}"; shift
    ask_choices=( $@ ); shift
    strict_ifs

    if [[ "$quiet" == 'true' ]];then
        ask_reply="$ask_default"
    else
        printf "%s [%s%s] " "$ask_text" "${ask_default}"  \
            "$(for a in ${ask_choices[@]};do
                printf /%s ${a}
            done)" >&2
        read -r -n1 ask_reply; [[ "$ask_reply" ]] && printf '\n' >&2
    fi

    ask_reply=${ask_reply^^}

    if [[ -z "$ask_reply" ]];then
        ask_reply="$ask_default"
    fi

    echo "${ask_reply}"
}

clean_up() {
    printf '\n'
    die $err_ctrl_c
}

git() {
    unstrict_ifs
    command -- git $@
    strict_ifs
}

make() {
    unstrict_ifs
    command -- make LOCALVERSION= $MAKEOPTS "$@"
    strict_ifs
}
directory=$(realpath "$directory")

method=none
debug=false
quiet=false
only_install=false
only_update=false
fresh_tree=false

while [[ $# -ne 0 ]];do
    arg="$1"
    if [[ -d "$arg" ]] || echo "$arg" | egrep -q '^(.*/)([^/]*)$';then # looks like a dir
        directory="$arg"
    fi
    arg="$1"
    shift

    while getopts ":dfiquvh" argument "$arg"; do
        case "$argument" in
            h)
                usage
            ;;
            v)
                version
            ;;
            d)
                debug=true
            ;;
            q)
                quiet=true
            ;;
            i)
                only_install=true
                [[ "$only_update" == 'true' ]] && {
                    printf "Either -u or -i, not both please.\n" >&2
                    die $err_only_one_action
                }
            ;;
            u)
                only_update=true
                [[ "$only_install" == 'true' ]] && {
                    printf "Either -u or -i, not both please.\n" >&2
                    die $err_only_one_action
                }
            ;;
            f)
                fresh_tree=true
            ;;
            ?)
                arg=${arg:1:1}
                invalid_arg "$arg"
            ;;
        esac
    done
done

trap 'clean_up' 2 3 15

if [[ ! -d "$directory" && "$fresh_tree" == 'false' ]];then
    printf "If \"%s\" needs to have a fresh kernel tree, run \`%s -f\`." "$directory" "$me"
    die $err_nonexistant_dir
elif [[ ! -w "$directory/Makefile" && "$fresh_tree" == 'false' ]];then
    die $err_unwritable_dir
fi

debug "\"$directory\", \"$branch\" branch\n"

# begin update process
debug "Changing to \"$directory\"\n"
if [[ "$fresh_tree" == true ]];then
    rm -rf "$directory" >/dev/null 2>&1
    mkdir "$directory" >/dev/null 2>&1 || die $err_unable_to_make_dir
fi
cd "$directory" || die $err_cant_change_dir

# backup kernel configuration, if there is one
if [[ -f .config && "$fresh_tree" == 'false' ]];then
    tmp_config_file=$(mktemp "${TMPDIR}/.lux-$$-configXXXXXX")
    cat ".config" > "$tmp_config_file"
    debug "Made config backup at \"$tmp_config_file\"\n"
    has_existing_configuration=true
else
    has_existing_configuration=false
fi

# decide if we want to clone, or reset an existing repo
if [[ "$fresh_tree" == 'true' ]];then
    if ask "There doesn't appear to be a git repository here. Make a new one?"; then
        git clone --depth=1 "$kernel_repo" "${PWD}" # we could just use '.' but it looks funny seeing "Cloning into '.'..."
    else
        die $err_no_git_repo
    fi
fi

git_dir="$PWD/$(git rev-parse --git-dir)"

if ! is_actually_kernel_repo;then
    printf "This is not a kernel source tree.\n" >&2
    die $err_not_a_kernel_repo
else
    rm -f "${directory}"/.git/gc.log
    quiet_git prune
fi

if [[ "$only_install" == 'false' ]];then
    debug "\$only_install is not set; updating kernel source tree.\n"

    # checking for updates
    printf "Retrieving updates... "
    git_pull

    target_version=$(get_target_version)
    debug "Target version: $target_version\n"
else
    target_version=none
fi

if [[ "$only_update" == 'true' ]];then
    debug "\$only_update is set, not installing.\n"
    if [[ "$target_version" == "$running_kernel_version" ]];then
        printf "no updates available.\n"
    else
        printf "version %s available\n" "${target_version}"
    fi
    exit $err_exited
fi

[[ "$target_version" == 'none' ]] && target_version=${running_kernel_version}
debug "Installing kernel source tree.\n"

# check if repository version is same as running
if [[ "$running_kernel_version" == "$target_version" ]];then
    need_update=false
    debug "You are currently running the same version as what is checked out right now. (running version $running_kernel_version)\n"
else
    need_update=true
    debug "You are not running the same as what is checked out right now. (running version $running_kernel_version)\n"
fi

if [[ "$need_update" == 'true' ]];then
    ask "Do you want to update your kernel? ($running_kernel_version --> $target_version)" || die $err_not_gonna_update
else
    if [[ "$quiet" == 'true' ]];then
        printf "No update needed.\n"
        exit $err_exited
    fi
    ask "You are running the latest version. Update anyway? ($running_kernel_version)" n && die $err_not_gonna_update
fi

old_target=${target_version}
# undo the version magic we did back in get_target_version earlier
if [[ "${target_version}" == *.0 ]];then
    target_version=${target_version%.0}
fi

if [[ "${only_install}" == 'false' ]];then
    quiet_git fetch --depth=1 origin "v${target_version}"
    quiet_git reset --hard "FETCH_HEAD" >/dev/null 2>&1
else
    quiet_git reset --hard "v${target_version}" >/dev/null 2>&1
fi

quiet_git clean -fdx -e '.config'

target_version=${old_target}

make mrproper || die $err_kernel_clean_failed

if [[ "$has_existing_configuration" == "true" ]];then
    debug "Writing config from backup\n"
    cat "$tmp_config_file" > ".config"
fi

touch "$prepare_log" "$patch_log" "$compile_log" "$install_log" "$post_install_log" >/dev/null 2>&1
[[ ! -w "$prepare_log" ]]       && prepare_log="/dev/null"
[[ ! -w "$patch_log" ]]         && patch_log="/dev/null"
[[ ! -w "$compile_log" ]]       && compile_log="/dev/null"
[[ ! -w "$install_log" ]]       && install_log="/dev/null"
[[ ! -w "$post_install_log" ]]  && post_install_log="/dev/null"

debug "Running \`kernel_prepare\`; logging to \"${prepare_log}\"\n"
kernel_prepare 2>&1 | tee -a "$prepare_log"

debug "Running \`kernel_patch\`; logging to \"${patch_log}\"\n"
kernel_patch 2>&1 | tee -a "$patch_log"

debug "Running \`kernel_configure\`; we can't log this due to complications involving menuconfig/nconfig\n"
kernel_configure

debug "Running \`kernel_compile\`; logging to \"${compile_log}\"\n"
kernel_compile 2>&1 | tee -a "$compile_log"

debug "Running \`kernel_install\`; logging to \"${install_log}\"\n"
kernel_install 2>&1 | tee -a "$install_log"

debug "Running \`kernel_post_install\`; logging to \"${post_install_log}\"\n"
kernel_post_install 2>&1 | tee -a "$post_install_log"
