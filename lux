#!/bin/bash
# lux, a Linux kernel updater - version 0.2.2
# Usage: lux [-dhiquv] [directory]
# Update a kernel source tree located in [directory] to the latest version, and
# then configure and install it.
#
# If unspecified, [directory] is the current working directory.
#
# Options:
#      -u                       only update the kernel source; don't install
#      -i                       only install the kernel source; don't update
#
#      -q                       non-interactive; use defaults for all questions
#      -d                       debug mode, be verbose
#
#      -h                       show help
#      -v                       show version
#
# End of help.
# Copyright (c) 2014, Kylie McClain <somasissounds@gmail.com>
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
# REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
# INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.
#
# End of copyright.
#

# Optimize for multi-core, use a thread for each core
MAKEOPTS="-j$(getconf _NPROCESSORS_ONLN)"

branch=stable
kernel_repo="https://git.kernel.org/pub/scm/linux/kernel/git/${branch}/linux-${branch}.git"

tmp_dir="/tmp"

directory="$PWD"

kernel_patch() {
    true
}

kernel_configure() {
    # look at the .config backup logic to see how $method is determined
    err=kernel_configuration_failed make $method
}

kernel_compile() {
    err=kernel_compilation_failed make
}

# TODO: do kernel installation in a more intelligent way?
kernel_install() {
    arch=$(uname -m)
    case "$arch" in
        i686)
            arch=x86
        ;;
        x86_64)
            arch=x86
        ;;
    esac
    
    err=kernel_modules_install_failed make modules_install
    echo "\`cp -Lv \"arch/${arch}/boot/bzImage\" "/boot/kernel"\`"
    cp -Lv "arch/${arch}/boot/bzImage" "/boot/kernel" || \
        error kernel_failed_to_install
}

config="/etc/lux.conf"

# you should not need to edit anything past here

set -o pipefail

me="${0##*/}"

err_good=0
err_invalid_arg=1
err_invalid_dir=2
err_git=3
err_no_git_repo=4
err_unable_to_make_dir=5
err_not_gonna_update=10
err_only_one_action=31
err_only_one_output_level=32
err_not_a_kernel_repo=63
err_kernel_configuration_failed=64
err_kernel_compilation_failed=65
err_kernel_modules_install_failed=66
err_kernel_failed_to_install=67
err_ctrl_c=127

running_kernel_version=$(uname -r | cut -d'-' -f1)

[[ -f "${config:-/etc/lux.conf}" ]] && . /etc/lux.conf

debug() {
    if [[ "$verbose" ]];then
        if [[ ! -z "$@" ]];then
            printf '%s: %s\n' "$me" "$@" >&2
        else
            return 0
        fi
    else
        return 1        
    fi
}

quiet() {
    if [[ "$quiet" ]];then
        return 0
    else
        return 1
    fi
}

help() {
    sed -n '/^#/!d;s/^# //;s/^#//;3,${p;}' "$0" | while IFS= read help_line;do
        if [[ "$help_line" == "End of help." ]];then
            exit 0
        else
            printf '%s\n' "$help_line"
        fi
    done
    exit 0
}

version() {
    sed 's/^# //;s/, .*-//;s/version //;2q;$!d' "$0"
    copyright
    exit 0
}

copyright() {
    sed -n '/^#/!d;s/^# //;s/^#//;/End of help./,${p;}' "$0" | \
    while IFS= read copyright_line;do
        if [[ "$copyright_line" == "End of help." ]];then
            true
        elif [[ "$copyright_line" == "End of copyright." ]];then
            break
        else
            printf '%s\n' "$copyright_line"
        fi
    done
}

error() {
    local error_code=$(eval echo "\$err_$@")
    debug "Exiting due to \"$@\" (error code: $error_code)"
    exit $error_code
}

invalid_arg() {
    printf "$me: invalid option -- '$@'\n"
    error invalid_arg
}

realpath() {
    printf '%s\n' "$(cd $(dirname $1); pwd)/$(basename $1)"
}

git() {
    debug "executing \`git $*\`"
    command -- git $* || { debug "git exited with error code $?"; error git; }
}

quiet_git() {
    local args="$@"
    [[ -z "$quiet" ]] && git "$args" && return $?
    case "$1" in
        checkout|fetch)
            args="$args -q"
        ;;
        pull)
            args="$args -q >/dev/null 2>&1"
        ;;
    esac
    eval git "$args"
}

is_actually_kernel_repo() {
    # sanity checks to make sure this is actually a kernel git repo
    # kernel Makefile always has VERSION as first line
    if [[ -f Makefile ]] && head -1 Makefile | grep -q '^VERSION';then
        return 0
    else
        return 1
    fi
}

make() {
    debug "executing \`make $MAKEOPTS $@\`"
    command make $MAKEOPTS "$@" || error "$err"
}

ask() {
    local ask_text="$1"
    if [[ "$2" != "y" ]];then
        local default='y'
        local default_text="Y/n"
    else
        local default='n'
        local default_text="y/N"
    fi
    
    if [[ "$quiet" ]];then
        ask_reply="$default"
    else
        printf "%s [%s] " "$ask_text" "$default_text"
        read -n1 ask_reply; printf '\n'
    fi
    
    ask_reply=$(echo "$ask_reply" | tr 'A-Z' 'a-z')
    
    if [[ -z "$ask_reply" ]];then
        ask_reply="$default"
    fi
    
    if [[ "$ask_reply" == "y" && "$default" == "y" ]];then
        return 0
    elif [[ "$ask_reply" == "n" && "$default" == "n" ]];then
        return 0
    elif [[ "$ask_reply" == "y" ]];then
        return 0
    elif [[ "$ask_reply" == "n" ]];then
        return 1
    else
        ask "$@"; return $?
    fi
    
}

clean_up() {
    printf '\n'
    error ctrl_c
}


while [[ $# -ne 0 ]];do
    arg="$1"
    if [[ -d "$arg" ]];then
        directory="$arg"
    fi
    arg="$1"
    shift
    
    while getopts ":dhiquv" argument "$arg"; do
        case "$argument" in
            d)
                verbose=true
                [[ "$quiet" ]] && { 
                    printf "Either -q or -d, not both please.\n"
                    error only_one_action
                }
            ;;
            q)
                quiet=true
                [[ "$verbose" ]] && { 
                    printf "Either -q or -d, not both please.\n"
                    error only_one_action
                }
            ;;
            i)
                only_install=true
                [[ "$only_update" ]] && { 
                    printf "Either -u or -i, not both please.\n"
                    error only_one_action
                }
            ;;
            u)
                only_update=true
                [[ "$only_install" ]] && { 
                    printf "Either -u or -i, not both please.\n"
                    error only_one_action
                }
            ;;
            h)
                help
            ;;
            v)
                version
            ;;
            # o)
            #     overwrite=true
            # ;;
            # TODO: implement multi-branch support (longterm, next, etc)
            # b)
            #     branch="$OPTARG"
            #     shift
            # ;;
            *)
                invalid_arg "$OPTARG"
            ;;
        esac
    done
    
done

trap 'clean_up' 2 3 15

if [[ ! -d "$directory" ]];then
    error invalid_dir
fi

directory=$(realpath "$directory")
debug "\"$directory\", \"$branch\" branch"

# begin update process
debug "Changing to \"$directory\""
if [[ -d "$directory" ]];then
    cd "$directory"
fi

# backup kernel configuration, if there is one
method=menuconfig

if [[ -f .config ]];then
    debug && printf "Creating .config backup..."
    tmp_config_file=$(mktemp "$tmp_dir/.lux-$$-configXXXXXX")
    cat ".config" > "$tmp_config_file" && debug && printf " $tmp_config_file\n"
    has_existing_configuration=true
    debug "You have an existing kernel config, so we'll use \`silentoldconfig\`"
    method=silentoldconfig
    debug && printf '\n'
fi

# decide if we want to clone, or reset an existing repo
if [[ ! -d ".git" ]];then
    if ask "There doesn't appear to be a git repository here. Make a new one?"; then
        git clone "$kernel_repo" "$directory"
    else
        error no_git_repo
    fi
fi

is_actually_kernel_repo || { printf "This is not a kernel source tree.\n" &&
error not_a_kernel_repo; }


if [[ -z "$only_install" ]];then
    debug "\$only_install is not set; updating kernel source tree."

    # checking for updates
    quiet_git reset --hard origin/master
    quiet_git checkout -f HEAD
    quiet_git pull -f $(debug && echo -v) origin master
    quiet_git fetch -p

    latest_version=$(git describe --tags $(git rev-list --tags --max-count=1) | sed 's/^v//')
    printf "Latest version available: v%s\n" "$latest_version"
fi

if [[ "$only_update" ]];then
    debug "\$only_update is set, not installing."
    exit 0
fi

latest_version=$(git describe --tags $(git rev-list --tags --max-count=1) | sed 's/^v//')
debug "Installing kernel source tree."

# check if repository version is same as running
if [[ "$running_kernel_version" == "$latest_version" ]];then
    need_update=
    debug "You are currently running the same version as what is checked out right now. (running version v$running_kernel_version)"
else
    need_update=true
    debug "You are not running the same as what is checked out right now. (running version v$running_kernel_version)"
fi

if [[ "$need_update" ]];then
    ask "Do you want to update your kernel? (v$running_kernel_version --> v$latest_version)" || error not_gonna_update
else
    ask "You don't need to update, you are running the latest version. Update anyway? (v$running_kernel_version)" n && error not_gonna_update
fi

quiet_git reset --hard "v${latest_version}"

if [[ "$tmp_config_file" ]];then
    debug "Writing config from backup"
    cp -v "$tmp_config_file" ".config"
fi

printf "Upgrading v$running_kernel_version --> v$latest_version, press ^C to abort.\n"
sleep 10

debug "Running \`kernel_patch\`"
kernel_patch

debug "Running \`kernel_configure\`"
kernel_configure

debug "Running \`kernel_compile\`"
kernel_compile

debug "Running \`kernel_install\`"
kernel_install

printf "Finished upgrading kernel. (v$running_kernel_version --> v$latest_version)\n\n"

