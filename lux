#!/bin/bash
# lux, a Linux kernel updater - version @@VERSION@@
#
# Copyright (c) 2014-2015 Kylie McClain <somasis@exherbo.org>
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
# End of copyright.
#

# Don't mess with these variables, just use lux.conf(5).

MAKEOPTS="-j$(( $(nproc 2>/dev/null || grep -c processor /proc/cpuinfo) + 2 ))"
directory=/usr/src/linux
branch=master
kernel_repo="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git"
target=tag:latest
preferred_config=menuconfig

kernel_prepare() {
    default_kernel_prepare "$@"
}

kernel_patch() {
    default_kernel_patch "$@"
}

kernel_configure() {
    default_kernel_configure "$@"
}

kernel_compile() {
    default_kernel_compile "$@"
}

kernel_install() {
    default_kernel_install "$@"
}

kernel_post_install() {
    default_kernel_post_install "$@"
}

default_kernel_prepare() {
    printf "Upgrading %s --> %s, press ^C to abort.\n\n" "$running_kernel_version" "$target_version"
    sleep 10
}

default_kernel_patch() {
    :
}

default_kernel_configure() {
    # look at the .config backup logic to see how $method is determined
    if [[ -z "${skip_default_kernel_config_check}" && ! -f "${directory}/.config" ]];then
        stderr "No .config exists in \"${directory}\".\n"
        if [[ ! -f /proc/config.gz && -f "${LIBDIR:-/lib}"/modules/$(uname -r)/kernel/kernel/configs.ko* ]];then
            debug "Attempting to load /proc/config.gz module. (configs.ko)"
            modprobe configs
            default_kernel_configure "$@"
        elif [[ -f /proc/config.gz ]] && ask "Do you want to use the config at /proc/config.gz?" y;then
            debug "gunzip -c /proc/config.gz > \"${directory}\"/.config"
            gunzip -c /proc/config.gz > "${directory}"/.config
            method=olddefconfig
        else
            stderr "Using default configuration.\n"
            method=defconfig
        fi
        skip_default_kernel_config_check=true default_kernel_configure "$@"
    elif [[ "$method" == "olddefconfig" ]];then
        if ask "Do you want to configure the kernel?" n;then
            method=olddefconfig
        else
            if [[ "${preferred_config}" == nconfig ]];then
                method=nconfig
            else
                method=menuconfig
            fi
        fi
    fi
    make $method || error kernel_configuration_failed
}

default_kernel_compile() {
    make || error kernel_compilation_failed
}

default_kernel_install() {
    make modules_install || error kernel_modules_install_failed
    image="$directory/$(make image_name)"
    make install || error kernel_failed_to_install
}

default_kernel_post_install() {
    printf 'Finished upgrading kernel. (%s --> %s)\n\n' "$running_kernel_version" "$target_version"
}

get_target_version() {
    case "$target" in
        tag:*)
            if [[ "${target##tag:}" == "latest" ]];then
                _target_version=$(git tag --sort v:refname | sort -ud)
                if [[ -f "${git_dir}/shallow" ]];then # is shallow...
                    # contact the remote for the tag list instead. shallow repos don't contain the full tag list
                    _target_version=$(git ls-remote -t "$kernel_repo" | sed 's#.*refs/tags/##;s#\^{}.*##' | cut -d'v' -f2- | tr '.' ' ' | sort -k 1n,1n -k 2n,2n -k 3n,3n -k 4n,4n | tr ' ' '.')
                fi
                if [[ "$branch" == *stable* || $(basename ${kernel_repo} | sed 's/\.git//') == *-stable ]];then # if following stable branch you probably don't want any dash versions
                    debug "Filtering out versions ending with dashed sections, those are testing versions..."
                    _target_version=$(echo "$_target_version" | grep -v -- '-.*')
                fi
                _target_version=$(echo "$_target_version" | tail -n1)
            else
                _target_version=${target##tag:}
            fi
            while [[ ${_target_version:0:1} == v ]];do
                _target_version=${_target_version:1}
            done
            if [[ "${_target_version}" == [0-9].[0-9] ]];then
                _target_version=${_target_version}.0
            fi
            _target_version=v${_target_version}
            displayed_target_version=${_target_version}
        ;;
        *)
            _target_version=${target}
            git_pull
            displayed_target_version=$(get_makefile_ver)
        ;;
    esac
    debug "Displayed target version: ${displayed_target_version}"
    debug "Actual target version: ${_target_version}"
    echo "$_target_version"
}

git_pull() {
    if [[ -z "${branch}" ]] || nonfatal git rev-parse --verify "${branch}" >/dev/null 2>&1;then
        branch=$(git rev-parse --abbrev-ref HEAD)
    else
        quiet_git branch "${branch}"
    fi
    quiet_git reset --hard origin/${branch}
    nonfatal quiet_git checkout -f HEAD || quiet_git reset --hard origin/${branch} # prevent merge conflicts
    # if we don't specify depth, `git` tries getting the whole tree!
    nonfatal quiet_git pull -f "$(debug && echo -v)" --depth=1 origin ${branch} || quiet_git reset --hard origin/${branch} # prevent merge conflicts
    quiet_git fetch -p
    quiet_git reset --hard origin/${branch}
}

get_makefile_ver() {
    make -s kernelversion 2>/dev/null
}

set -o pipefail

me="${0##*/}"

err_good=0
err_invalid_arg=1
err_nonexistant_dir=2
err_git=3
err_no_git_repo=4
err_unable_to_make_dir=5
err_unwritable_dir=6
err_cant_change_dir=7
err_make=9
err_not_gonna_update=10
err_invalid_target_version=11
err_only_one_action=31
err_only_one_output_level=32
err_not_a_kernel_repo=62
err_kernel_clean_failed=63
err_kernel_configuration_failed=64
err_kernel_compilation_failed=65
err_kernel_modules_install_failed=66
err_kernel_failed_to_install=67
err_ctrl_c=127

running_kernel_version=v$(uname -r | sed 's#-.*##;s#[^0-9.]##g')

export GREP_OPTIONS=
tmp_dir=${TMPDIR:-/tmp}
config="/etc/lux.conf"

[[ -f "${config}" ]] && . "${config}"

directory="${directory:-/usr/src/linux}"
prepare_log="${directory}/lux-prepare.log"
patch_log="${directory}/lux-patch.log"
compile_log="${directory}/lux-compile.log"
install_log="${directory}/lux-install.log"
post_install_log="${directory}/lux-post-install.log"

debug() {
    if [[ "$debug" ]];then
        if [[ ! -z "$@" ]];then
            stderr '%s: %s\n' "$me" "$@"
        else
            return 0
        fi
    else
        return 1
    fi
}

quiet() {
    if [[ "$quiet" ]];then
        return 0
    else
        return 1
    fi
}

usage() {
    echo "usage: ${me} [-dfiquvh] [directory]"
    exit 0
}

version() {
    sed 's/^# //;s/, .*-//;s/version //;/^#!/d;s/^#//' "$0" |
    while IFS= read copyright_line;do
        if [[ "$copyright_line" == "End of copyright." ]];then
            break
        else
            printf '%s\n' "$copyright_line"
        fi
    done
    exit 0
}

nonfatal() {
    nonfatal=1
    eval "$@"
    nonfatal=
}

error() {
    if [[ "$1" == "not_gonna_update" ]];then
        exit "$err_not_gonna_update"
    fi
    local error_code=$(eval echo "\$err_$*")
    [[ "$nonfatal" ]] || stderr "Exiting due to \"%s\" (error code: %s)\n" "$*" "$error_code"
    [[ "$nonfatal" ]] || exit $error_code
}

invalid_arg() {
    stderr "$me: invalid option -- '$*'\n"
    error invalid_arg >/dev/null 2>&1
}

realpath() {
    printf '%s\n' "$(cd $(dirname $1); pwd)/$(basename $1)"
}

git() {
    debug "executing \`git $*\`"
    command -- git $@ || { debug "git exited with error code $?"; error git; }
}

quiet_git() {
    local cmd="$1"
    shift
    local args="$@"

    if [[ "$debug" ]];then
        eval "git $cmd $args"; return $?
    fi
    case "$cmd" in
        checkout|fetch)
            args="$cmd $args -q"
        ;;
        pull|reset)
            args="$cmd $args >/dev/null 2>&1"
        ;;
        *)
            args="$cmd $args"
        ;;
    esac
    eval "git $args"; return $?
}

is_actually_kernel_repo() {
    # sanity checks to make sure this is actually a kernel git repo
    # kernel Makefile always has VERSION as first line
    [[ ! -z "$fresh_tree" ]] && return 0

    if [[ -f "${directory}/Makefile" ]] && head -1 "${directory}/Makefile" | grep -q '^VERSION';then
        return 0
    else
        return 1
    fi
}

make() {
    debug "executing \`make LOCALVERSION= $MAKEOPTS $*\`"
    command make LOCALVERSION= $MAKEOPTS $@
    if [[ $? -ne 0 ]];then
        debug "\`make $MAKEOPTS $@\` exited with error code $?"
        return $?
    fi
}

ask() {
    ask_text="$1"
    if [[ "$2" == "y" || "$#" -lt 2 ]];then
        _default='y'
        _default_text="Y/n"
    else
        _default='n'
        _default_text="y/N"
    fi

    if [[ "$quiet" ]];then
        ask_reply="$_default"
    else
        printf "%s [%s] " "$ask_text" "$_default_text"
        read -n1 ask_reply; [[ "$ask_reply" ]] && printf '\n'
    fi

    ask_reply=$(echo "$ask_reply" | tr '[:upper:]' '[:lower:]')

    if [[ -z "$ask_reply" ]];then
        ask_reply="$_default"
    fi

    if [[ "$_default" == "$ask_reply" ]];then
        return 0
    elif [[ "$_default" != "$ask_reply" ]] && [[ "$ask_reply" == 'y' || "$ask_reply" == 'n' ]];then
        return 1
    else
        ask "$@"; return $?
    fi

    return $?
}

stderr() {
    printf "$@" >&2
}

clean_up() {
    printf '\n'
    error ctrl_c
}

cp() {
    if [[ "$debug" ]];then
        command cp -v "$@" >&2
    else
        command cp "$@"
    fi
}

directory=$(realpath "$directory")

while [[ $# -ne 0 ]];do
    arg="$1"
    if [[ -d "$arg" ]] || echo "$arg" | egrep -q '^(.*/)([^/]*)$';then # looks like a dir
        directory="$arg"
    fi
    arg="$1"
    shift

    while getopts ":dfiquvh" argument "$arg"; do
        case "$argument" in
            h)
                usage
            ;;
            v)
                version
            ;;
            d)
                debug=true
                [[ "$quiet" ]] && {
                    stderr "Either -q or -d, not both please.\n"
                    error only_one_action
                }
            ;;
            q)
                quiet=true
                [[ "$debug" ]] && {
                    stderr "Either -q or -d, not both please.\n"
                    error only_one_action
                }
            ;;
            i)
                only_install=true
                [[ "$only_update" ]] && {
                    stderr "Either -u or -i, not both please.\n"
                    error only_one_action
                }
            ;;
            u)
                only_update=true
                [[ "$only_install" ]] && {
                    stderr "Either -u or -i, not both please.\n"
                    error only_one_action
                }
            ;;
            f)
                fresh_tree=true
            ;;
            ?)
                arg=${arg:1:1}
                invalid_arg "$arg"
            ;;
        esac
    done
done

trap 'clean_up' 2 3 15

if [[ ! -d "$directory" && -z "$fresh_tree" ]];then
    echo "If \"$directory\" needs to have a fresh kernel tree, run \`lux -f\`."
    error nonexistant_dir
elif [[ ! -w "$directory/Makefile" && -z "$fresh_tree" ]];then
    error unwritable_dir
fi

debug "\"$directory\", \"$branch\" branch"

# begin update process
debug "Changing to \"$directory\""
if [[ ! -z "$fresh_tree" ]];then
    rm -rf "$directory" >/dev/null 2>&1
    mkdir "$directory" >/dev/null 2>&1 || error unable_to_make_dir
fi
cd "$directory" || error cant_change_dir

# backup kernel configuration, if there is one
method=menuconfig

if [[ -f .config && -z "$fresh_tree" ]];then
    tmp_config_file=$(mktemp "$tmp_dir/.lux-$$-configXXXXXX")
    cat ".config" > "$tmp_config_file"
    debug "Made config backup at \"$tmp_config_file\""
    has_existing_configuration=true
    debug "Since you have an existing kernel config, we'll use \`oldoldconfig\`"
    method=olddefconfig
fi

# decide if we want to clone, or reset an existing repo
if [[ ! -z "$fresh_tree" ]];then
    if ask "There doesn't appear to be a git repository here. Make a new one?"; then
        git clone --depth=1 "$kernel_repo" "${PWD}" # we could just use '.' but it looks funny seeing "Cloning into '.'..."
    else
        error no_git_repo
    fi
fi

git_dir="$PWD/$(git rev-parse --git-dir)"

is_actually_kernel_repo || { stderr "This is not a kernel source tree.\n" &&
error not_a_kernel_repo; }

if [[ -z "$only_install" ]];then
    debug "\$only_install is not set; updating kernel source tree."

    # checking for updates
    printf "Retrieving updates... "
    git_pull

    target_version=$(get_target_version)
    debug "Target version: $target_version"
fi

if [[ "$only_update" ]];then
    debug "\$only_update is set, not installing."
    if [[ "$target_version" == "$running_kernel_version" ]];then
        printf "no updates available.\n"
    else
        printf "version %s available\n" "${target_version}"
    fi
    exit 0
fi

[[ -z "$target_version" ]] && target_version=${running_kernel_version}
debug "Installing kernel source tree."

# check if repository version is same as running
if [[ "$running_kernel_version" == "$target_version" ]];then
    need_update=
    debug "You are currently running the same version as what is checked out right now. (running version $running_kernel_version)"
else
    need_update=true
    debug "You are not running the same as what is checked out right now. (running version $running_kernel_version)"
fi

if [[ "$need_update" ]];then
    ask "Do you want to update your kernel? ($running_kernel_version --> $target_version)" || error not_gonna_update
elif [[ -z "$need_update" ]];then
    if [[ "$quiet" ]];then
        printf "No update needed.\n"
        exit 0
    fi
    ask "You are running the latest version. Update anyway? ($running_kernel_version)" n && error not_gonna_update
fi

old_target=${target_version}
# undo the version magic we did back in get_target_version earlier
if [[ "${target_version}" == *.0 ]];then
    target_version=${target_version%.0}
fi

if [[ -z "${only_install}" ]];then
    quiet_git fetch --depth=1 origin "${target_version}"
    quiet_git reset --hard "FETCH_HEAD"
else
    quiet_git reset --hard "${target_version}"
fi

quiet_git clean -fdx


target_version=${old_target}

make mrproper || error kernel_clean_failed

if [[ "$has_existing_configuration" ]];then
    debug "Writing config from backup"
    cat "$tmp_config_file" > ".config"
fi

touch "$prepare_log" "$patch_log" "$compile_log" "$install_log" "$post_install_log" >/dev/null 2>&1

[[ ! -w "$prepare_log"   ]] && prepare_log="/dev/null"
[[ ! -w "$patch_log"   ]] && patch_log="/dev/null"
[[ ! -w "$compile_log" ]] && compile_log="/dev/null"
[[ ! -w "$install_log" ]] && install_log="/dev/null"
[[ ! -w "$post_install_log" ]] && post_install_log="/dev/null"

debug "Running \`kernel_prepare\`; logging to \"$prepare_log\""
kernel_prepare 2>&1 | tee -a "$prepare_log"

debug "Running \`kernel_patch\`; logging to \"$patch_log\""
kernel_patch 2>&1 | tee -a "$patch_log"

debug "Running \`kernel_configure\`; we can't log this due to complications involving menuconfig/nconfig"
kernel_configure

debug "Running \`kernel_compile\`; logging to \"$compile_log\""
kernel_compile 2>&1 | tee -a "$compile_log"

debug "Running \`kernel_install\`; logging to \"$install_log\""
kernel_install 2>&1 | tee -a "$install_log"

debug "Running \`kernel_post_install\`; logging to \"$post_install_log\""
kernel_post_install 2>&1 | tee -a "$post_install_log"
